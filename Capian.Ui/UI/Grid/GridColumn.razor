@namespace Caspian.UI
@typeparam TEntity
@if (GridState.InitializedState == InitializedState.FirstFetchData)
{
<td @attributes="attrs">
    @if (ChildContent == null)
    {
        if (isCheckBox)
        {
            <CheckBox Value="value" Disabled />
        }
        else
        {
            @value
        }
    }
    else
    {
        @ChildContent
    }
</td>
}

@code
{
    string InitTitle;
    object value;
    Dictionary<string, object> attrs;
    bool isCheckBox;

    [Parameter]
    public Expression<Func<TEntity, string>> Field { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public object From { get; set; }

    [Parameter]
    public EventCallback<object> FromChanged { get; set; }

    [Parameter]
    public Expression<Func<object>> FromExpression { get; set; }

    [Parameter]
    public object To { get; set; }

    [Parameter]
    public EventCallback<object> ToChanged { get; set; }

    [Parameter]
    public Expression<Func<object>> ToExpression { get; set; }

    [Parameter]
    public int? Width { get; set; }

    [CascadingParameter(Name = "GridRowData")]
    public RowData<TEntity> RowData { get; set; }

    [CascadingParameter(Name = "GridStateData")]
    public ColumnAppState<TEntity> GridState { get; set; }


    protected override void OnInitialized()
    {
        attrs = new Dictionary<string, object>();
        if (Field != null)
        {
            Expression expr = Field.Body;
            if (expr.NodeType == ExpressionType.Call)
            {
                var args = (expr as MethodCallExpression).Arguments;
                if (args.Count == 0)
                    expr = (expr as MethodCallExpression).Object;
                else
                    expr = (expr as MethodCallExpression).Arguments[0];
            }
            if (expr.NodeType == ExpressionType.Convert)
                expr = (expr as UnaryExpression).Operand;
            if (expr.NodeType == ExpressionType.MemberAccess)
            {
                var propertyExpr = expr as MemberExpression;
                var type = propertyExpr.Type;
                isCheckBox = type == typeof(bool) || type == typeof(bool?);

                var attr = propertyExpr.Member.GetCustomAttribute<DisplayNameAttribute>();
                if (attr == null)
                    InitTitle = propertyExpr.Member.Name;
                else
                    InitTitle = attr.DisplayName;
            }
        }
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Style.HasValue())
            attrs["style"] = Style;
        if (GridState.InitializedState == InitializedState.GridColumnsNotInitialized)
        {
            if (Field != null)
                GridState.List.Add(Field.Body);
            var headerData = new GridHeaderData()
            {
                Title = Title ?? InitTitle,
                Width = Width,
                FromExpression = FromExpression,
                ToExpression = ToExpression,
                Orderbyable = Field?.Body as BinaryExpression == null
            };
            if (FromExpression != null || ToExpression != null)
            {
                var expr = Field.Body;
                if (expr.NodeType == ExpressionType.Call)
                    expr = (expr as MethodCallExpression).Arguments[0];
                headerData.Expression = expr as MemberExpression;
            }
            GridState.ColumnsData.Add(headerData);
        }
        else
        {
            if (ChildContent == null && RowData.Data != null)
                value = Field.Compile().Invoke(RowData.Data);
        }
        base.OnParametersSet();
    }
}
