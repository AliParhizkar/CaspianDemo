@namespace Caspian.UI
@implements IInputValueInitializer
@if (!LoadOnContent || Status == WindowStatus.Open)
{
    <CascadingValue Value="(id + 1)" Name="WindowId">
        <div @attributes="attrs" @ref="window" class="t-widget t-window">
            @if (!HideTitle)
            {
                <div class="t-window-titlebar t-header">
                    <span class="t-window-title">@Title</span>
                    <div class="t-window-actions" @onclick="() => { Status = WindowStatus.Close; }">
                        <span class="t-window-action t-link">
                            <i class="fa fa-close"></i>
                        </span>
                    </div>
                </div>
            }
            <div class="t-window-content t-content">
                @if (Content != null)
                {
                    @Content
                }
            </div>
        </div>
    </CascadingValue>
}

@code
{
    protected int id;

    Dictionary<string, object> attrs;

    [JsonIgnore]
    protected ElementReference window;

    [Inject, JsonIgnore]
    protected IJSRuntime jsRuntime { get; set; }

    [Inject, JsonIgnore]
    public WindowAppState AppState { get; set; }

    [CascadingParameter(Name = "WindowId"), JsonProperty("windowId")]
    public int WindowId { get; set; }

    [Parameter, JsonIgnore]
    public string Id { get; set; }

    [Parameter, JsonIgnore]
    public string Style { get; set; }

    [Parameter, JsonProperty("title")]
    public string Title { get; set; }

    [Parameter, JsonIgnore]
    public RenderFragment Content { get; set; }

    [Parameter, JsonProperty("status")]
    public WindowStatus Status { get; set; } = WindowStatus.Close;

    [Parameter, JsonIgnore]
    public EventCallback<WindowStatus> StatusChanged { get; set; }

    [Parameter, JsonIgnore]
    public Expression<Func<WindowStatus>> StatusExpression { get; set; }

    [Parameter, JsonProperty("modal")]
    public bool Modal { get; set; } = true;

    [Parameter, JsonProperty("resizable")]
    public bool Resizable { get; set; }

    [Parameter, JsonIgnore]
    public bool HideTitle { get; set; }

    [Parameter, JsonProperty("draggable")]
    public bool Draggable { get; set; }

    [Parameter]
    public bool LoadOnContent { get; set; }

    [Parameter, JsonProperty("parentChaild")]
    public bool ParentChaild { get; set; }

    public void Open()
    {
        Status = WindowStatus.Open;
        StatusChanged.InvokeAsync(WindowStatus.Open);
    }

    public async Task SetValue(object value)
    {
        await Close();
    }

    public async Task Close()
    {
        Status = WindowStatus.Close;
        await StatusChanged.InvokeAsync(WindowStatus.Close);
    }

    protected string ConvertToJson()
    {
        return JsonConvert.SerializeObject(this);
    }

    protected override void OnInitialized()
    {
        AppState.Window = this;
        id = WindowId;
        Modal = true;
        Draggable = true;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        attrs = new Dictionary<string, object>();
        if (Style.HasValue())
            attrs.Add("style", Style);
        base.OnParametersSet();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!LoadOnContent || Status == WindowStatus.Open)
        {
            var json = this.ConvertToJson();
            await jsRuntime.InvokeVoidAsync("$.telerik.bindControl", window, json, UiControlType.Window);
        }
        if (firstRender)
        {
            var data = new JsValueSetter(this);
            await jsRuntime.InvokeVoidAsync("$.telerik.bindValue", DotNetObjectReference.Create(data), window, UiControlType.Window);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
